@model GamingPlatform.Models.SpeedTypingViewModel

@{
    ViewData["Title"] = "SpeedTyping";
}
<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SpeedTyping</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        #progressBar {
            transition: width 0.3s;
        }

        #messages {
            height: 400px;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 10px;
            background-color: #f8f9fa;
        }

        textarea#userInput {
            resize: none;
        }

        .player-list {
            display: flex;
            gap: 10px;
            overflow-x: auto;
            padding-bottom: 10px;
        }

        .player-card {
            flex: 0 0 auto;
            width: 150px;
            border: 1px solid #ddd;
            border-radius: 10px;
            text-align: center;
            padding: 10px;
            background-color: #f8f9fa;
        }

        .player-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: #007bff;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            font-weight: bold;
            font-size: 20px;
        }

        .chat-message {
            display: flex;
            align-items: flex-start;
            margin-bottom: 10px;
        }

        .chat-avatar {
            width: 40px;
            height: 40px;
            flex-shrink: 0;
            border-radius: 50%;
            background-color: #007bff;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 18px;
            margin-right: 10px;
        }

        .chat-content {
            background-color: #e9ecef;
            border-radius: 10px;
            padding: 10px;
            max-width: calc(100% - 50px);
        }

        .chat-pseudo {
            font-weight: bold;
            margin-bottom: 5px;
        }

        .chat-text {
            margin: 0;
        }
    </style>
</head>

<body class="bg-light">
    <div class="container py-3">
        <h1 class="text-center text-primary mb-4">ðŸ”¥ SpeedTyping ðŸ”¥</h1>
        <p class="text-center text-muted mb-4">Testez votre vitesse et votre prÃ©cision en tapant ! DÃ©fiez vos amis et
            grimpez au classement.</p>

        <div class="row g-4">
            <!-- Colonne 1: Jeu et Informations -->
            <div class="col-md-8">
                <div class="row g-4">
                    <div class="col-md-6">
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="mb-4">
                                    <!-- DÃ©tails du Lobby -->
                                    <h2 class="h5">Lobby: @Model.Name</h2>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="mb-4">
                                    <!-- Liste des Joueurs -->
                                    <h2 class="h5">Joueurs connectÃ©s</h2>
                                    @if (Model?.PlayerPseudos != null && Model.PlayerPseudos.Any())
                                    {
                                        <div class="player-list">
                                            @foreach (var pseudo in Model.PlayerPseudos)
                                            {
                                                <div class="player-card">
                                                    <div class="player-avatar">@pseudo.Substring(0, 1).ToUpper()</div>
                                                    <div>@pseudo</div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="text-muted">Aucun joueur n'est encore connectÃ©. Invitez vos amis Ã 
                                            rejoindre !</p>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <div class="mb-4">
                            <!-- ParamÃ¨tres et Progression -->
                            <h2 class="h5">ParamÃ¨tres du Jeu</h2>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <select id="language" class="form-select">
                                        <option value="French">FranÃ§ais</option>
                                        <option value="English">Anglais</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <select id="difficulty" class="form-select">
                                        <option value="Easy">Facile</option>
                                        <option value="Medium">Moyen</option>
                                        <option value="Hard">Difficile</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <button class="btn btn-primary w-100" onclick="startGame()">Lancer la
                                        Partie</button>
                                </div>
                                <div class="col-md-6">
                                    <a href="/lobby" class="btn btn-danger w-100">Quitter le jeu</a>
                                   
                                </div>
                            </div>
                        </div>

                        <div class="mb-4">
                            <!-- Jeu: Texte et Barre de Progression -->
                            <h2 class="h5">Progression</h2>
                            <div id="timer" class="mb-3 fs-4 fw-bold text-center text-warning">00:00</div>
                            <div id="textToType" class="bg-light p-3 border rounded mb-3" style="font-size: 18px;">
                                <!-- Texte Ã  taper -->
                            </div>
                            <textarea id="userInput" class="form-control mb-3" rows="4" oninput="updateProgress()"
                                disabled placeholder="Tapez ici..."></textarea>
                            <div id="progress" class="progress">
                                <div id="progressBar" class="progress-bar" role="progressbar" style="width: 0%;"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Colonne 2: Chat -->
            <div class="col-md-4">
                <div class="card mb-4">
                    <div class="card-body">
                        <h2 class="h5">ðŸ’¬ Chat</h2>
                        <div id="messages" class="rounded mb-3">
                            <!-- Les messages s'afficheront ici -->
                        </div>
                        <div class="input-group">
                            <input type="text" id="messageInput" class="form-control" placeholder="Tapez un message...">
                            <button class="btn btn-primary" onclick="sendMessage()">Envoyer</button>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <!-- Statistiques -->
                        <h2 class="h5">ðŸ“Š Statistiques</h2>
                        <div class="row text-center">
                            <div class="col">
                                <strong>Vitesse</strong>
                                <div id="wpm" class="fs-5">0</div>
                                <small>Mots/min</small>
                            </div>
                            <div class="col">
                                <strong>PrÃ©cision</strong>
                                <div id="accuracy" class="fs-5">0%</div>
                                <small>PrÃ©cision</small>
                            </div>
                            <div class="col">
                                <strong>Score</strong>
                                <div id="score" class="fs-5">0</div>
                                <small>Score</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Leaderboard -->
    <div class="modal fade" id="leaderboardModal" tabindex="-1" aria-labelledby="leaderboardModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="leaderboardModalLabel">
                        <i class="fas fa-trophy"></i> Classement Final
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Rang</th>
                                <th>Joueur</th>
                                <th>WPM</th>
                                <th>PrÃ©cision</th>
                                <th>Score</th>
                            </tr>
                        </thead>
                        <tbody id="leaderboardTableBody">
                            <!-- Les donnÃ©es seront insÃ©rÃ©es dynamiquement ici -->
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                    <button type="button" class="btn btn-success" onclick="saveScore()">Sauvegarder</button>
                    <button type="button" class="btn btn-primary" onclick="shareLeaderboard()">Partager</button>
                </div>
            </div>
        </div>
    </div>

    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script>
        const lobbyId = "@Model.LobbyId";
        let timeLeft;
        let timerInterval;
        let isGameOver = false;

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/SpeedTypingHub", {
                skipNegotiation: true,
                transport: signalR.HttpTransportType.WebSockets
            })
            .configureLogging(signalR.LogLevel.Debug)
            .build();


        connection.on("GameStarted", (text, timeLimit) => {
            console.log(`Game started with text: ${text} and time limit: ${timeLimit}`);
            document.getElementById("textToType").innerText = text;
            document.getElementById("userInput").value = "";
            document.getElementById("progressBar").style.width = "0%";
            document.getElementById("userInput").disabled = false;
            timeLeft = timeLimit;
            updateTimer();
            timerInterval = setInterval(updateTimer, 1000);
        });

        connection.on("ProgressUpdate", (isCorrect, progress, wpm, accuracy, score) => {
            if (isGameOver) return; // Ne rien faire si la partie est terminÃ©e
            const progressBar = document.getElementById("progressBar");
            progressBar.style.width = progress + "%";
            progressBar.style.backgroundColor = isCorrect ? "green" : "red";
            document.getElementById("wpm").innerText = wpm;
            document.getElementById("accuracy").innerText = accuracy.toFixed(2);
            document.getElementById("score").innerText = score;
            if (!isCorrect) {
                playErrorSound();
            }
        });

        connection.on("ScoreUpdate", (scores) => {
            const scoreboardElement = document.getElementById("scoreboard");
            scoreboardElement.innerHTML = "";
            for (const [playerId, score] of Object.entries(scores)) {
                scoreboardElement.innerHTML += `<p>${playerId}: ${score}</p>`;
            }
        });

        connection.on("GameOver", (leaderboard) => {
             isGameOver = true; // Marquer le jeu comme terminÃ©
             clearInterval(timerInterval); // Stopper le chronomÃ¨tre si nÃ©cessaire
            document.getElementById("userInput").value = "";
            document.getElementById("userInput").disabled = true;
            document.getElementById("textToType").value = "";
            document.getElementById("progressBar").style.width = "0%";

            const leaderboardTableBody = document.getElementById("leaderboardTableBody");
            leaderboardTableBody.innerHTML = "";

            leaderboard.sort((a, b) => b.score - a.score);

            leaderboard.forEach((player, index) => {
                const row = document.createElement('tr');
                if (index === 0) row.classList.add('table-warning');

                row.innerHTML = `
                        <td>${index + 1}</td>
                        <td>${player.pseudo || "Unknown"}</td>
                        <td>${player.wpm}</td>
                        <td>${player.accuracy.toFixed(2)}%</td>
                        <td>${player.score}</td>
                    `;
                leaderboardTableBody.appendChild(row);
            });

            // Sauvegarder les scores auprÃ¨s du serveur
            const scores = leaderboard.map(player => ({
                PlayerId: player.playerId || 'Unknown',
                Pseudo: player.pseudo || 'Unknown',
                WPM: parseInt(player.wpm, 10) || 0,
                Accuracy: parseFloat(player.accuracy) || 0,
                Score: parseInt(player.score, 10) || 0,
                Difficulty: document.getElementById("difficulty").value || 'Unknown',
                DatePlayed: new Date().toISOString()
            }));

            console.log("Processed scores to send:", scores, ":", lobbyId);

            //connection.invoke("SaveScores", scores, lobbyId).catch(err => console.error("Failed to save scores:", err));

            const leaderboardModal = new bootstrap.Modal(document.getElementById('leaderboardModal'));
            leaderboardModal.show();

             // Fermer le modal aprÃ¨s 10 secondes
            setTimeout(() => {
                leaderboardModal.hide();
            }, 10000); // 10000 millisecondes = 10 secondes
        });

        connection.on("DifficultyChanged", (difficulty) => {
            console.log(`Difficulty changed to: ${difficulty}`);
            const difficultySelect = document.getElementById("difficulty");
            difficultySelect.value = difficulty;
        });

        connection.on("LanguageChanged", (language) => {
            console.log(`Language changed to: ${language}`);
            const languageSelect = document.getElementById("language");
            languageSelect.value = language;
        });

        connection.start().then(async () => {
            console.log("Connection started");

            const playerPseudo = "@Model.CurrentPlayerPseudo";

            if (playerPseudo) {
                await connection.invoke("JoinLobby", lobbyId, playerPseudo);
                console.log(`${playerPseudo} a rejoint le lobby ${lobbyId}`);
            } else {
                console.error("Pseudo du joueur actuel non disponible");
            }
        }).catch(err => console.error("Erreur lors de la connexion :", err.toString()));

        connection.on("ReceiveMessage", (pseudo, message) => {
            const messagesDiv = document.getElementById("messages");
            const avatarLetter = pseudo.charAt(0).toUpperCase(); // PremiÃ¨re lettre du pseudo pour l'avatar
            messagesDiv.innerHTML += `
                <div class="chat-message">
                    <div class="chat-avatar">${avatarLetter}</div>
                    <div class="chat-content">

                        <p class="chat-text">${message}</p>
                    </div>
                </div>
            `; //<div class="chat-pseudo">${pseudo}</div>
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });

        // Fonction pour partager le leaderboard (optionnel)
        function shareLeaderboard() {
            const leaderboardTable = document.getElementById("leaderboardTableBody");
            const leaderboardText = Array.from(leaderboardTable.rows)
                .map(row => `${row.cells[1].textContent}: ${row.cells[4].textContent} points`)
                .join('\n');

            if (navigator.share) {
                navigator.share({
                    title: 'Classement Speed Typing',
                    text: leaderboardText
                });
            } else {
                navigator.clipboard.writeText(leaderboardText).then(() => {
                    alert('Classement copiÃ© dans le presse-papiers !');
                });
            }
        }

        async function saveScore() {
            const scores = []; // CrÃ©ez un tableau pour stocker les scores des joueurs
            const leaderboardRows = document.querySelectorAll("#leaderboardTableBody tr");

            leaderboardRows.forEach(row => {
                const playerId = row.cells[1].textContent; // Pseudo du joueur
                const wpm = parseInt(row.cells[2].textContent); // WPM
                const accuracy = parseFloat(row.cells[3].textContent); // PrÃ©cision
                const scoreValue = parseInt(row.cells[4].textContent); // Score

                scores.push({
                    PlayerId: playerId,
                    Pseudo: playerId,
                    WPM: wpm,
                    Accuracy: accuracy,
                    Difficulty: document.getElementById("difficulty").value || 'Unknown',
                    DatePlayed: new Date().toISOString()
                });
            });

            try {
                const response = await fetch('/Game/SpeedTyping/SaveScores', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ scores, lobbyId }) 
                });

                if (response.ok) {
                    alert("Scores sauvegardÃ©s avec succÃ¨s !");
                } else {
                    alert("Erreur lors de la sauvegarde des scores.");
                }
            } catch (error) {
                console.error("Erreur lors de la sauvegarde :", error);
                alert("Ã‰chec de la sauvegarde des scores. Veuillez rÃ©essayer.");
            }
        }

        async function startGame() {
            try {
                const difficulty = document.getElementById("difficulty").value;
                if (!["Easy", "Medium", "Hard"].includes(difficulty)) {
                    alert("DifficultÃ© invalide !");
                    return;
                }

                const language = document.getElementById("language").value;
                if (!["English", "French"].includes(language)) {
                    alert("Langue invalide !");
                    return;
                }

                console.log(`difficulty=${difficulty}`);
                console.log(`language=${language}`);

                await connection.invoke("StartGame", difficulty, language);
                console.log("Game started successfully.");
            } catch (error) {
                console.error("Failed to start game:", error);
                alert("Erreur lors du dÃ©marrage du jeu : " + (error.message || "Une erreur inconnue est survenue."));
            }
        }

        async function updateProgress() {
            const typedText = document.getElementById("userInput").value;
            await connection.invoke("UpdateProgress", typedText);
        }

        function updateTimer() {
            document.getElementById("timer").innerText = timeLeft;
            if (timeLeft > 0) {
                timeLeft--;
            } else {
                clearInterval(timerInterval);
                connection.invoke("UpdateProgress", document.getElementById("userInput").value);
            }
        }

        function playErrorSound() {
            // Implement sound playing logic here
            console.log("Error sound played");
        }

        async function sendMessage() {
            const messageInput = document.getElementById("messageInput");
            if (messageInput.value.trim() !== "") {
                await connection.invoke("SendMessage", messageInput.value);
                messageInput.value = "";
            }
        }


        document.getElementById("difficulty").addEventListener("change", async (event) => {
            const newDifficulty = event.target.value;
            try {
                await connection.invoke("ChangeDifficulty", newDifficulty);
                console.log(`Difficulty set to: ${newDifficulty}`);
            } catch (error) {
                console.error("Failed to change difficulty:", error);
                alert("Erreur lors du changement de difficultÃ© : " + (error.message || "Une erreur inconnue est survenue."));
            }
        });

        document.getElementById("language").addEventListener("change", async (event) => {
            const newLanguage = event.target.value;
            try {
                await connection.invoke("ChangeLanguage", newLanguage);
                console.log(`Language set to: ${newLanguage}`);
            } catch (error) {
                console.error("Failed to change language:", error);
                alert("Erreur lors du changement de Langue : " + (error.message || "Une erreur inconnue est survenue."));
            }
        });

    </script>
</body>

</html>