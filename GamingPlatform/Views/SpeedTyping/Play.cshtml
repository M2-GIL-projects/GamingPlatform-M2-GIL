@model GamingPlatform.Models.SpeedTypingViewModel

@{
    ViewData["Title"] = "SpeedTyping";
}
<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SpeedTyping</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        #progressBar {
            transition: width 0.3s;
        }

        #messages {
            height: 400px;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 10px;
            background-color: #f8f9fa;
        }

        textarea#userInput {
            resize: none;
        }
    </style>
</head>

<body class="bg-light">

    <div class="container py-3">
        <h1 class="text-center text-primary mb-4">SpeedTyping</h1>

        <div class="row g-4">
            <!-- Colonne 1: Jeu et Informations -->
            <div class="col-md-8">
                <div class="card">
                    <div class="card-body">
                        <div class="mb-4">
                            <!-- Détails du Lobby -->
                            <h2 class="h5">Lobby: @Model.Name</h2>
                            <p><strong>LobbyID :</strong> @Model?.LobbyId ?? "LobbyId non défini"</p>
                        </div>
                        <div class="mb-4">
                            <!-- Liste des Joueurs -->
                            <h2 class="h5">Liste des Joueurs</h2>
                            @if (Model?.PlayerPseudos != null && Model.PlayerPseudos.Any())
                            {
                                <ul class="list-group">
                                    @foreach (var pseudo in Model.PlayerPseudos)
                                    {
                                        <li class="list-group-item">@pseudo</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="text-muted">Aucun joueur n'est associé à ce lobby.</p>
                            }
                        </div>
                    </div>
                </div>


                <div class="card">
                    <div class="card-body">
                        <div class="mb-4">
                            <!-- Paramètres et Progression -->
                            <h2 class="h5">Paramètres du Jeu</h2>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <select id="difficulty" class="form-select">
                                        <option value="Easy">Facile</option>
                                        <option value="Medium">Moyen</option>
                                        <option value="Hard">Difficile</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <button class="btn btn-primary w-100" onclick="startGame()">Lancer la
                                        Partie</button>
                                </div>
                            </div>
                        </div>

                        <div class="mb-4">
                            <!-- Jeu: Texte et Barre de Progression -->
                            <h2 class="h5">Progression</h2>
                            <div id="timer" class="mb-3 fs-4 fw-bold text-center text-warning">00:00</div>
                            <div id="textToType" class="bg-light p-3 border rounded mb-3" style="font-size: 18px;">
                                <!-- Texte à taper -->
                            </div>
                            <textarea id="userInput" class="form-control mb-3" rows="4" oninput="updateProgress()"
                                disabled placeholder="Tapez ici..."></textarea>
                            <div id="progress" class="progress">
                                <div id="progressBar" class="progress-bar" role="progressbar" style="width: 0%;"></div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>

            <!-- Colonne 2: Chat -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h2 class="h5">Chat</h2>
                        <div id="messages" class="rounded mb-3"></div>
                        <div class="input-group">
                            <input type="text" id="messageInput" class="form-control" placeholder="Tapez un message...">
                            <button class="btn btn-primary" onclick="sendMessage()">Envoyer</button>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <!-- Statistiques -->
                        <h2 class="h5">Statistiques</h2>
                        <div class="row text-center">
                            <div class="col">
                                <strong>Vitesse</strong>
                                <div id="wpm" class="fs-5">0</div>
                                <small>Mots/min</small>
                            </div>
                            <div class="col">
                                <strong>Précision</strong>
                                <div id="accuracy" class="fs-5">0%</div>
                                <small>Précision</small>
                            </div>
                            <div class="col">
                                <strong>Score</strong>
                                <div id="score" class="fs-5">0</div>
                                <small>Score</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

<!-- Modal Leaderboard -->
<div class="modal fade" id="leaderboardModal" tabindex="-1" aria-labelledby="leaderboardModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="leaderboardModalLabel">
                    <i class="fas fa-trophy"></i> Classement Final
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Rang</th>
                            <th>Joueur</th>
                            <th>WPM</th>
                            <th>Précision</th>
                            <th>Score</th>
                        </tr>
                    </thead>
                    <tbody id="leaderboardTableBody">
                        <!-- Les données seront insérées dynamiquement ici -->                                                                                                                                                                                                                                                                                                                                                                                                  
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                 <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button
                <button type="button" class="btn btn-success" onclick="saveScore()">Sauvegarder</button>
                <button type="button" class="btn btn-primary" onclick="shareLeaderboard()">Partager</button>
            </div>
        </div>
    </div>
</div>

    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/SpeedTypingHub", {
                skipNegotiation: true,
                transport: signalR.HttpTransportType.WebSockets
            })
            .configureLogging(signalR.LogLevel.Debug)
            .build();

        let timeLeft;
        let timerInterval;

        connection.on("GameStarted", (text, timeLimit) => {
            console.log(`Game started with text: ${text} and time limit: ${timeLimit}`);
            document.getElementById("textToType").innerText = text;
            document.getElementById("userInput").value = "";
            document.getElementById("progressBar").style.width = "0%";
            document.getElementById("userInput").disabled = false;
            timeLeft = timeLimit;
            updateTimer();
            timerInterval = setInterval(updateTimer, 1000);
        });

        connection.on("ProgressUpdate", (isCorrect, progress, wpm, accuracy, score) => {
            const progressBar = document.getElementById("progressBar");
            progressBar.style.width = progress + "%";
            progressBar.style.backgroundColor = isCorrect ? "green" : "red";
            document.getElementById("wpm").innerText = wpm;
            document.getElementById("accuracy").innerText = accuracy.toFixed(2);
            document.getElementById("score").innerText = score; // Ajoutez un élément pour afficher le score
            if (!isCorrect) {
                playErrorSound();
            }
        });

        connection.on("ScoreUpdate", (scores) => {
            const scoreboardElement = document.getElementById("scoreboard");
            scoreboardElement.innerHTML = "";
            for (const [playerId, score] of Object.entries(scores)) {
                scoreboardElement.innerHTML += `<p>${playerId}: ${score}</p>`;
            }
        });


        connection.on("GameOver", (leaderboard) => {
            clearInterval(timerInterval);
            document.getElementById("userInput").disabled = true;

            const scores = leaderboard.map(p => ({
                playerPseudo: p.playerId,
                wpm: p.wpm,
                accuracy: p.accuracy,
                difficulty: document.getElementById("difficulty").value
            }));
            connection.invoke("SaveScores", scores);

            const leaderboardTableBody = document.getElementById("leaderboardTableBody");
            leaderboardTableBody.innerHTML = ""; // Vider le tableau
            
            // Trier le leaderboard par score décroissant
            leaderboard.sort((a, b) => b.score - a.score);
            
            // Ajouter les lignes du leaderboard
            leaderboard.forEach((player, index) => {
                const row = `
                    <tr class="${index === 0 ? 'table-warning' : ''}">
                        <td>${index + 1}</td>
                        <td>${player.Pseudo}</td>
                        <td>${player.wpm}</td>
                        <td>${player.accuracy.toFixed(2)}%</td>
                        <td>${player.score !== undefined ? player.score : 'N/A'}</td>
                    </tr>
                `;
                leaderboardTableBody.innerHTML += row;
            });
            
            // Afficher la modal
            const leaderboardModal = new bootstrap.Modal(document.getElementById('leaderboardModal'));
            leaderboardModal.show();
        });

        // Fonction pour partager le leaderboard (optionnel)
        function shareLeaderboard() {
            const leaderboardTable = document.getElementById("leaderboardTableBody");
            const leaderboardText = Array.from(leaderboardTable.rows)
                .map(row => `${row.cells[1].textContent}: ${row.cells[4].textContent} points`)
                .join('\n');
            
            if (navigator.share) {
                navigator.share({
                    title: 'Classement Speed Typing',
                    text: leaderboardText
                });
            } else {
                navigator.clipboard.writeText(leaderboardText).then(() => {
                    alert('Classement copié dans le presse-papiers !');
                });
            }
        }


        connection.on("ReceiveMessage", (pseudo, message) => {
            const messagesDiv = document.getElementById("messages");
            messagesDiv.innerHTML += `<p><strong>${pseudo}:</strong> ${message}</p>`;
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });



        async function startGame() {
            try {
                const difficulty = document.getElementById("difficulty").value;
                if (!["Easy", "Medium", "Hard"].includes(difficulty)) {
                    alert("Difficulté invalide !");
                    return;
                }

                console.log(`difficulty=${difficulty}`);

                await connection.invoke("StartGame", difficulty);
                console.log("Game started successfully.");
            } catch (error) {
                console.error("Failed to start game:", error);
                alert("Erreur lors du démarrage du jeu : " + (error.message || "Une erreur inconnue est survenue."));
            }
        }

        async function updateProgress() {
            const typedText = document.getElementById("userInput").value;
            await connection.invoke("UpdateProgress", typedText);
        }

        function updateTimer() {
            document.getElementById("timer").innerText = timeLeft;
            if (timeLeft > 0) {
                timeLeft--;
            } else {
                clearInterval(timerInterval);
                connection.invoke("UpdateProgress", document.getElementById("userInput").value);
            }
        }

        function playErrorSound() {
            // Implement sound playing logic here
            console.log("Error sound played");
        }

        async function sendMessage() {
            const messageInput = document.getElementById("messageInput");
            if (messageInput.value.trim() !== "") {
                await connection.invoke("SendMessage", messageInput.value);
                messageInput.value = "";
            }
        }

        connection.on("DifficultyChanged", (difficulty) => {
            console.log(`Difficulty changed to: ${difficulty}`);
            const difficultySelect = document.getElementById("difficulty");
            difficultySelect.value = difficulty;
        });


    connection.start().then(async () => {
        console.log("Connection started");

        const lobbyId = "@Model.LobbyId"; // ID du lobby
        const playerPseudos = @Html.Raw(Json.Serialize(Model.PlayerPseudos)); // Liste des pseudos

        let playerPseudo = null;
        let validationStatus = "";

        // Boucle pour demander un pseudo tant qu'il n'est pas valide
        while (validationStatus !== "valid") {
            playerPseudo = prompt("Confirmez votre pseudo :", playerPseudos[0]);

            if (playerPseudo) {
                try {
                    // Valider le pseudo avec le serveur
                    validationStatus = await connection.invoke("ValidatePseudo", lobbyId, playerPseudo);

                    if (validationStatus === "invalid") {
                        alert("Pseudo invalide ou non trouvé dans la liste. Veuillez réessayer.");
                    } else if (validationStatus === "same") {
                        alert("Vous avez déjà confirmé ce pseudo.");
                        break; // Sort de la boucle, car le pseudo est déjà confirmé
                    }
                } catch (error) {
                    console.error("Erreur lors de la validation du pseudo :", error);
                    alert("Une erreur est survenue lors de la validation de votre pseudo.");
                    break;
                }
            } else {
                alert("Veuillez entrer un pseudo.");
            }
        }

        if (validationStatus === "valid" && playerPseudo) {
            // Si le pseudo est valide, rejoindre le lobby
            await connection.invoke("JoinLobby", lobbyId, playerPseudo);
            console.log(`${playerPseudo} a rejoint le lobby ${lobbyId}`);
        }
    }).catch(err => console.error("Erreur lors de la connexion :", err.toString()));

    document.getElementById("difficulty").addEventListener("change", async (event) => {
        const newDifficulty = event.target.value;
        try {
            await connection.invoke("ChangeDifficulty", newDifficulty);
            console.log(`Difficulty set to: ${newDifficulty}`);
        } catch (error) {
            console.error("Failed to change difficulty:", error);
            alert("Erreur lors du changement de difficulté : " + (error.message || "Une erreur inconnue est survenue."));
        }
    });

    </script>
</body>

</html>