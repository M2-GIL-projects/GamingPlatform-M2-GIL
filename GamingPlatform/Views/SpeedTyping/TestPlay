@page
@model GamingPlatform.Models.PlayViewModel
@{
    ViewData["Title"] = "SpeedTyping";
}

<!DOCTYPE html>
<html>
<head>
    <title>Speed Typing</title>
    <style>
        #textToType {
            font-size: 18px;
            margin-bottom: 20px;
        }

        #userInput {
            width: 100%;
            height: 100px;
        }

        #progress {
            width: 100%;
            height: 20px;
            background-color: #ddd;
        }

        #progressBar {
            height: 100%;
            width: 0%;
            transition: width 0.3s;
        }

        #stats {
            margin-top: 20px;
        }

        #timer {
            font-size: 24px;
            font-weight: bold;
        }

        #chat {
            margin-top: 20px;
        }

        #messages {
            height: 200px;
            overflow-y: scroll;
            border: 1px solid #ddd;
        }
    </style>
</head>

<body>
   @if (Model != null)
   {
       if (Model.Lobby != null)
       {
           <h2>Lobby: @(Model.Lobby.Id.ToString())</h2>
           if (Model.PlayerIds != null && Model.PlayerIds.Any())
           {
               <h3>Players: @(string.Join(", ", Model.PlayerIds))</h3>
           }
           else
           {
               <h3>Aucun joueur dans ce lobby.</h3>
           }

           <select id="difficulty">
               <option value="Easy">Easy</option>
               <option value="Medium">Medium</option>
               <option value="Hard">Hard</option>
           </select>
       }
       else
       {
           <p>Le lobby est null.</p>
       }
   }
   else
   {
       <p>Le mod√®le est null.</p>
   }

    <button onclick="startGame()">Start Game</button>
    <div id="timer"></div>
    <div id="textToType"></div>
    <textarea id="userInput" oninput="updateProgress()" disabled></textarea>
    <div id="progress">
        <div id="progressBar"></div>
    </div>
    <div id="stats">
        <span>WPM: <span id="wpm">0</span></span>
        <span>Accuracy: <span id="accuracy">0</span>%</span>
    </div>
    <div id="chat">
        <div id="messages"></div>
        <input type="text" id="messageInput" placeholder="Type a message...">
        <button onclick="sendMessage()">Send</button>
    </div>

    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/speedTypingHub")
            .build();

        let timeLeft;
        let timerInterval;

        connection.on("GameDetails", (lobbyId, players, difficulty) => {
            document.getElementById("lobbyId").innerText = `Lobby: ${lobbyId}`;
            document.getElementById("players").innerText = `Players: ${players.join(", ")}`;
            document.getElementById("difficulty").value = difficulty;
        });

        connection.on("GameStarted", (text, timeLimit) => {
            document.getElementById("textToType").innerText = text;
            document.getElementById("userInput").value = "";
            document.getElementById("progressBar").style.width = "0%";
            document.getElementById("userInput").disabled = false;
            timeLeft = timeLimit;
            updateTimer();
            timerInterval = setInterval(updateTimer, 1000);
        });

        connection.on("ProgressUpdate", (isCorrect, progress, wpm, accuracy) => {
            const progressBar = document.getElementById("progressBar");
            progressBar.style.width = progress + "%";
            progressBar.style.backgroundColor = isCorrect ? "green" : "red";
            document.getElementById("wpm").innerText = wpm;
            document.getElementById("accuracy").innerText = accuracy.toFixed(2);
            if (!isCorrect) {
                playErrorSound();
            }
        });

        connection.on("GameOver", (leaderboard) => {
            clearInterval(timerInterval);
            document.getElementById("userInput").disabled = true;
            alert("Game Over! Leaderboard:\n" + leaderboard.map(p => `${p.PlayerId}: ${p.WPM} WPM, ${p.Accuracy.toFixed(2)}% Accuracy`).join("\n"));
        });

        connection.on("ReceiveMessage", (senderId, message) => {
            const messagesDiv = document.getElementById("messages");
            messagesDiv.innerHTML += `<p><strong>${senderId}:</strong> ${message}</p>`;
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });

        async function startGame() {
            const difficulty = document.getElementById("difficulty").value;
            const lobbyId = "@Model.Lobby.Id"; // Use the ID from the model
            await connection.invoke("StartGame", lobbyId, difficulty);
        }

        async function getLobbyDetails() {
            const lobbyId = "@Model.Lobby.Id"; // Use the ID from the model
            await connection.invoke("GetGameDetails", lobbyId);
        }

        async function updateProgress() {
            const typedText = document.getElementById("userInput").value;
            await connection.invoke("UpdateProgress", typedText);
        }

        function updateTimer() {
            document.getElementById("timer").innerText = timeLeft;
            if (timeLeft > 0) {
                timeLeft--;
            } else {
                clearInterval(timerInterval);
                connection.invoke("UpdateProgress", document.getElementById("userInput").value);
            }
        }

        function playErrorSound() {
            // Implement sound playing logic here
            console.log("Error sound played");
        }

        async function sendMessage() {
            const messageInput = document.getElementById("messageInput");
            if (messageInput.value.trim() !== "") {
                await connection.invoke("SendMessage", messageInput.value);
                messageInput.value = "";
            }
        }

        connection.start().then(() => {
            console.log("Connected to hub");
            connection.invoke("GetGameDetails");
        });
    </script>
</body>

</html>
