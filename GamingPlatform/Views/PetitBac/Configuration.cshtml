<div class="container mt-5">
    <h1 class="mb-4 text-center">Configuration de la Partie : Petit Bac</h1>

    <form method="post" asp-action="ConfigureGame" id="configureGameForm">
        <input type="hidden" name="LobbyId" value="@Model.LobbyId" />

        <!-- Pseudo du Créateur -->
        <div class="mb-4">
            <label for="CreatorPseudo" class="form-label">Pseudo du Créateur</label>
            <input type="text" class="form-control" id="CreatorPseudo" name="CreatorPseudo" value="@Model.CreatorPseudo" required />
            <small class="text-danger d-none" id="pseudoError">Le pseudo ne peut pas être vide.</small>
        </div>

        <!-- Nombre de Joueurs -->
        <div class="mb-4">
            <label for="PlayerCount" class="form-label">Nombre de Joueurs</label>
            <input type="number" class="form-control" id="PlayerCount" name="PlayerCount" value="@Model.PlayerCount" min="2" required />
        </div>

        <!-- Sélection de la Lettre -->
        <div class="mb-4">
            <label for="Letter" class="form-label">Lettre</label>
            <select class="form-select" id="Letter" name="Letter" required>
                @foreach (var letter in "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                {
                    <option value="@letter" selected="@(Model.Letter == letter)">@letter</option>
                }
            </select>
        </div>

        <!-- Sélection des Catégories -->
        <div class="mb-4">
            <label class="form-label">Sélectionnez les Catégories :</label>
            <div class="d-flex flex-wrap" id="categoriesContainer">
                @{
                    int itemsPerColumn = 5;
                    int totalItems = Model.AvailableCategories.Count;
                    int totalColumns = (int)Math.Ceiling((double)totalItems / itemsPerColumn);

                    for (int columnIndex = 0; columnIndex < totalColumns; columnIndex++)
                    {
                        <div class="categories-column me-3">
                            @for (int i = columnIndex * itemsPerColumn; i < (columnIndex + 1) * itemsPerColumn && i < totalItems; i++)
                            {
                                <div class="form-check">
                                    <input class="form-check-input category-checkbox" type="checkbox" id="category_@i" name="SelectedCategories" value="@Model.AvailableCategories[i]" />
                                    <label class="form-check-label" for="category_@i">@Model.AvailableCategories[i]</label>
                                </div>
                            }
                        </div>
                    }
                }
            </div>
            <small class="text-danger d-none" id="categoryError">Vous devez sélectionner au moins une catégorie.</small>
        </div>

        <!-- Condition d'Arrêt -->
        <div class="mb-4">
            <label for="EndCondition" class="form-label">Condition d'Arrêt</label>
            <select class="form-select" id="EndCondition" name="EndCondition" required>
                <option value="TimeLimit" selected="@(Model.EndCondition == "TimeLimit")">Limite de Temps</option>
                <option value="AllPlayersDone" selected="@(Model.EndCondition == "AllPlayersDone")">Lorsque tous les joueurs ont terminé</option>

            </select>
        </div>

        <!-- Temps Limite -->
        <div class="mb-4" id="TimeLimitSection" style="display: @(Model.EndCondition == "TimeLimit" ? "block" : "none");">
            <label for="TimeLimit" class="form-label">Temps Limite (en minutes)</label>
            <input type="number" class="form-control" id="TimeLimit" name="TimeLimit" value="@Model.TimeLimit" min="1" />
            <small class="text-danger d-none" id="timeLimitError">Vous devez renseigner un temps limite valide.</small>
        </div>

        <!-- Bouton de soumission -->
        <div class="d-flex justify-content-center mb-5">
            <button type="submit" class="btn btn-primary btn-lg px-5" id="submitButton">Lancer la Partie</button>
        </div>
    </form>
</div>


    <style>
    .categories-column {
        display: flex;
        flex-direction: column;
        gap: 10px; /* Espacement entre les éléments */
    }
    .d-flex {
        display: flex;
        flex-wrap: wrap; /* Permet le retour à la ligne si les colonnes dépassent la largeur */
        gap: 15px; /* Espacement entre les colonnes */
    }
    </style>


    @section Scripts {
    <script>
        // Gérer l'affichage dynamique du champ "Temps Limite"
        document.addEventListener("DOMContentLoaded", function () {
            const endConditionDropdown = document.getElementById('EndCondition');
            const timeLimitSection = document.getElementById('TimeLimitSection');

            // Fonction pour afficher/masquer le champ Temps Limite
            const toggleTimeLimitSection = () => {
                if (endConditionDropdown.value === 'TimeLimit') {
                    timeLimitSection.style.display = 'block';
                } else {
                    timeLimitSection.style.display = 'none';
                }
            };

            // Initialiser l'état lors du chargement
            toggleTimeLimitSection();

            // Ajouter un écouteur sur le changement de valeur
            endConditionDropdown.addEventListener('change', toggleTimeLimitSection);
        });
 


    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("configureGameForm");
        const pseudoInput = document.getElementById("CreatorPseudo");
        const timeLimitInput = document.getElementById("TimeLimit");
        const endConditionDropdown = document.getElementById("EndCondition");
        const categoriesContainer = document.getElementById("categoriesContainer");
        const categoryCheckboxes = document.querySelectorAll(".category-checkbox");

        const pseudoError = document.getElementById("pseudoError");
        const timeLimitError = document.getElementById("timeLimitError");
        const categoryError = document.getElementById("categoryError");

        const toggleTimeLimitSection = () => {
            const timeLimitSection = document.getElementById("TimeLimitSection");
            if (endConditionDropdown.value === "TimeLimit") {
                timeLimitSection.style.display = "block";
            } else {
                timeLimitSection.style.display = "none";
            }
        };

        endConditionDropdown.addEventListener("change", toggleTimeLimitSection);
        toggleTimeLimitSection();

        form.addEventListener("submit", function (e) {
            let isValid = true;

            // Validation du pseudo
            if (pseudoInput.value.trim() === "") {
                pseudoError.classList.remove("d-none");
                isValid = false;
            } else {
                pseudoError.classList.add("d-none");
            }

            // Validation du temps limite si TimeLimit est sélectionné
            if (endConditionDropdown.value === "TimeLimit" && (timeLimitInput.value === "" || parseInt(timeLimitInput.value) < 1)) {
                timeLimitError.classList.remove("d-none");
                isValid = false;
            } else {
                timeLimitError.classList.add("d-none");
            }

            // Validation des catégories
            const atLeastOneChecked = Array.from(categoryCheckboxes).some(checkbox => checkbox.checked);
            if (!atLeastOneChecked) {
                categoryError.classList.remove("d-none");
                isValid = false;
            } else {
                categoryError.classList.add("d-none");
            }

            // Empêche l'envoi si le formulaire n'est pas valide
            if (!isValid) {
                e.preventDefault();
            }
        });
    });
</script>
}

</div>
