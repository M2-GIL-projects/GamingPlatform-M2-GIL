@model GamingPlatform.Models.Morpion
@{
    ViewData["Title"] = "Jeu de Morpion";
}

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Morpion en Ligne</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script> 
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</head>
<body>
    <div class="container mt-5">
        <h2 class="text-center">Jeu de Morpion</h2>
        <div id="game-section">
            <p><strong>@Model.PlayerX</strong> toi, tu joues avec X.</p>
            <p><strong>@Model.PlayerO</strong> toi, tu joues avec O.</p>
            <p class="text-center"><strong id="current-player">@Model.CurrentPlayer</strong>, c'est à toi de jouer.</p>
            <div id="game-status"></div>
            <div class="d-flex justify-content-center">
                <table class="table table-bordered text-center w-auto">
                    <tbody>
                        @for (int i = 0; i < 3; i++)
                        {
                            <tr>
                                @for (int j = 0; j < 3; j++)
                                {
                                    <td><button class="btn btn-outline-secondary" onclick="makeMove(@i, @j)" id="cell-@i-@j"></button></td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <button class="btn btn-danger mt-3" onclick="resetGame()">Réinitialiser le jeu</button>
        </div>
    </div>

    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/morpionhub")
            .build();

        const lobbyId = "@ViewData["LobbyId"]";
        const playerX = "@ViewData["PlayerX"]";
        const playerO = "@ViewData["PlayerO"]";

        connection.start().then(async () => {
            if (lobbyId) {
                await connection.invoke("JoinLobby", lobbyId);
                console.log(`Rejoint le lobby ${lobbyId}`);
            }
        }).catch(err => console.error(err));

        connection.on("ReceiveMove", (row, col, player) => {
            const cell = document.getElementById(`cell-${row}-${col}`);
            cell.innerText = player;
            cell.disabled = true;
            document.getElementById("current-player").innerText = player === "X" ? playerO : playerX;
        });

        connection.on("ReceiveReset", () => {
            for (let row = 0; row < 3; row++) {
                for (let col = 0; col < 3; col++) {
                    const cell = document.getElementById(`cell-${row}-${col}`);
                    cell.innerText = "";
                    cell.disabled = false;
                }
            }
            document.getElementById("current-player").innerText = playerX;
            document.getElementById("game-status").innerHTML = "";
        });
        connection.on("GameOver", (winnerSymbol) => {
            console.log("GameOver event received. Winner: ", winnerSymbol);
            const playerX = "@Model.PlayerX";
            const playerO = "@Model.PlayerO";
            const currentPlayer = "@Model.CurrentPlayer";
            let winnerName, message;

            if (winnerSymbol === "X" || winnerSymbol === "O") {
                winnerName = winnerSymbol === "X" ? playerX : playerO;
                message = `${winnerName} a gagné la partie.`;
                
                if (winnerName === currentPlayer) {
                    Swal.fire({
                        title: 'Félicitations !',
                        text: message,
                        icon: 'success',
                        confirmButtonText: 'OK',
                        timer: 3000, 
                        timerProgressBar: true 
                    });
                } else {
                    Swal.fire({
                        title: 'Partie terminée',
                        text: message,
                        icon: 'success',
                        confirmButtonText: 'OK',
                        timer: 3000, 
                        timerProgressBar: true 
                    });
                }
            } else if (winnerSymbol === null || winnerSymbol === "null") {
                Swal.fire({
                    title: 'Match nul',
                    text: 'La partie se termine par un match nul.',
                    icon: 'info',
                    confirmButtonText: 'OK',
                    timer: 3000,
                    timerProgressBar: true 
                });
            } else {
                console.error("Erreur : winnerSymbol invalide", winnerSymbol);
            }

            for (let row = 0; row < 3; row++) {
                for (let col = 0; col < 3; col++) {
                    document.getElementById(`cell-${row}-${col}`).disabled = true;
                }
            }
        });


        connection.on("InvalidMove", (message) => {
            document.getElementById("game-status").innerHTML = `<div class="alert alert-danger text-center">${message}</div>`;
        });

        function makeMove(row, col) {
            connection.invoke("MakeMove", lobbyId, row, col).catch(err => console.error(err));
        }

        function resetGame() {
            connection.invoke("ResetGame", lobbyId).catch(err => console.error(err));
        }
    </script>
</body>
</html>
