@{
    Layout = null;
    var lobbyId = ViewData["LobbyId"];
    var playerPseudos = ViewData["PlayerPseudos"] as List<string>;
}

<!DOCTYPE html>
<html>
<head>
    <title>Morpion</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.14/signalr.min.js"></script>
    <style>
        #board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
        }
        .cell {
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #f0f0f0;
            font-size: 24px;
            border: 1px solid #ccc;
            cursor: pointer;
        }
        .cell.taken {
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <h1>Morpion</h1>
    <h2>Lobby ID : @lobbyId</h2>
    <h3>Joueurs :</h3>
    <ul>
        @foreach (var player in playerPseudos)
        {
            <li>@player</li>
        }
    </ul>

    <h3 id="currentPlayer">Joueur actuel : X</h3>
    <div id="board"></div>
    <p id="gameStatus"></p>

    <script>
    const lobbyId = '@lobbyId';
    const playerName = prompt("Entrez votre nom :");
    let currentPlayer = "X"; // Début du jeu

    // Connexion à SignalR
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/morpionHub")
        .build();

    // Rejoindre le lobby
    connection.start().then(() => {
        connection.invoke("JoinGame", lobbyId, playerName);
    });

    // Écouter les événements du serveur
    connection.on("UpdateGame", (board, nextPlayer) => {
        updateBoard(board);
        currentPlayer = nextPlayer;
        $("#currentPlayer").text("Joueur actuel : " + nextPlayer);
    });

    connection.on("GameOver", (message) => {
        $("#gameStatus").text(message);
        alert(message);
    });

    connection.on("Error", (message) => {
        alert("Erreur : " + message);
    });

    // Gérer les clics sur les cases du plateau
    function updateBoard(boardString) {
        const rows = boardString.trim().split("\n");
        $("#board").empty();

        for (let i = 0; i < rows.length; i++) {
            const cells = rows[i].trim().split(/\[|\]/).filter(Boolean);
            for (let j = 0; j < cells.length; j++) {
                const cellValue = cells[j] === " " ? "" : cells[j];
                const cell = $("<div>")
                    .addClass("cell")
                    .text(cellValue)
                    .data("x", i)
                    .data("y", j)
                    .toggleClass("taken", cellValue !== "");

                if (cellValue === "") {
                    cell.click(function () {
                        connection.invoke("MakeMove", lobbyId, i, j, currentPlayer)
                            .catch(err => console.error(err));
                    });
                }

                $("#board").append(cell);
            }
        }
    }

    // Initialiser le plateau vide au chargement
    updateBoard("[ ] [ ] [ ]\n[ ] [ ] [ ]\n[ ] [ ] [ ]");
</script>

</body>
</html>
